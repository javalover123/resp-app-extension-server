/*
 * RESP.app Extension server
 * RESP.app Extension Server API allows you to extend RESP.app with your custom data formatters
 *
 * The version of the OpenAPI document: 2022.0-preview1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.javalover123.resp.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * DecodePayload
 */
@JsonPropertyOrder({
  DecodePayload.JSON_PROPERTY_DATA,
  DecodePayload.JSON_PROPERTY_REDIS_KEY_NAME,
  DecodePayload.JSON_PROPERTY_REDIS_KEY_TYPE
})
@JsonTypeName("DecodePayload")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2022-07-30T22:32:13.307768900+08:00[Asia/Shanghai]")
@Introspected
public class DecodePayload {
    public static final String JSON_PROPERTY_DATA = "data";
    private String data;

    public static final String JSON_PROPERTY_REDIS_KEY_NAME = "redis-key-name";
    private String redisKeyName;

    public static final String JSON_PROPERTY_REDIS_KEY_TYPE = "redis-key-type";
    private String redisKeyType;

    public DecodePayload() {
    }

    public DecodePayload data(String data) {
        this.data = data;
        return this;
    }

    /**
     * Base64 encoded string
     * @return data
     **/
    @Nullable
    @Schema(name = "data", description = "Base64 encoded string", required = false)
    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getData() {
        return data;
    }

    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setData(String data) {
        this.data = data;
    }

    public DecodePayload redisKeyName(String redisKeyName) {
        this.redisKeyName = redisKeyName;
        return this;
    }

    /**
     * Get redisKeyName
     * @return redisKeyName
     **/
    @Nullable
    @Schema(name = "redis-key-name", required = false)
    @JsonProperty(JSON_PROPERTY_REDIS_KEY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getRedisKeyName() {
        return redisKeyName;
    }

    @JsonProperty(JSON_PROPERTY_REDIS_KEY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRedisKeyName(String redisKeyName) {
        this.redisKeyName = redisKeyName;
    }

    public DecodePayload redisKeyType(String redisKeyType) {
        this.redisKeyType = redisKeyType;
        return this;
    }

    /**
     * Get redisKeyType
     * @return redisKeyType
     **/
    @Nullable
    @Schema(name = "redis-key-type", required = false)
    @JsonProperty(JSON_PROPERTY_REDIS_KEY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getRedisKeyType() {
        return redisKeyType;
    }

    @JsonProperty(JSON_PROPERTY_REDIS_KEY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRedisKeyType(String redisKeyType) {
        this.redisKeyType = redisKeyType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DecodePayload decodePayload = (DecodePayload) o;
        return Objects.equals(this.data, decodePayload.data) &&
            Objects.equals(this.redisKeyName, decodePayload.redisKeyName) &&
            Objects.equals(this.redisKeyType, decodePayload.redisKeyType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(data, redisKeyName, redisKeyType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DecodePayload {\n");
        sb.append("    data: ").append(toIndentedString(data)).append("\n");
        sb.append("    redisKeyName: ").append(toIndentedString(redisKeyName)).append("\n");
        sb.append("    redisKeyType: ").append(toIndentedString(redisKeyType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
