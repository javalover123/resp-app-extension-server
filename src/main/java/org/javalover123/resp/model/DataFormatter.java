/*
 * RESP.app Extension server
 * RESP.app Extension Server API allows you to extend RESP.app with your custom data formatters
 *
 * The version of the OpenAPI document: 2022.0-preview1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.javalover123.resp.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * DataFormatter
 */
@JsonPropertyOrder({
  DataFormatter.JSON_PROPERTY_ID,
  DataFormatter.JSON_PROPERTY_NAME,
  DataFormatter.JSON_PROPERTY_READ_ONLY
})
@JsonTypeName("DataFormatter")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2022-07-30T22:32:13.307768900+08:00[Asia/Shanghai]")
@Introspected
public class DataFormatter {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_READ_ONLY = "read-only";
    private Boolean readOnly;

    public DataFormatter(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public DataFormatter id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Internal formatter ID used in requests to this API
     * @return id
     **/
    @NotNull
    @Schema(name = "id", example = "1", description = "Internal formatter ID used in requests to this API", required = true)
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(String id) {
        this.id = id;
    }

    public DataFormatter name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Name displayed inside RDM app
     * @return name
     **/
    @NotNull
    @Schema(name = "name", example = "My .net models decoder", description = "Name displayed inside RDM app", required = true)
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public DataFormatter readOnly(Boolean readOnly) {
        this.readOnly = readOnly;
        return this;
    }

    /**
     * Read-only formatters only receive decode requests
     * @return readOnly
     **/
    @Nullable
    @Schema(name = "read-only", description = "Read-only formatters only receive decode requests", required = false)
    @JsonProperty(JSON_PROPERTY_READ_ONLY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getReadOnly() {
        return readOnly;
    }

    @JsonProperty(JSON_PROPERTY_READ_ONLY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataFormatter dataFormatter = (DataFormatter) o;
        return Objects.equals(this.id, dataFormatter.id) &&
            Objects.equals(this.name, dataFormatter.name) &&
            Objects.equals(this.readOnly, dataFormatter.readOnly);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, readOnly);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DataFormatter {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
